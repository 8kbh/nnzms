# -*- coding: utf-8 -*-
"""processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ySxS49PdOm8hq0a_FR4G2lanG-SVMEKy
"""

from functions_a import *


form = PredictionFormMultMax()
if request.method == "POST":
    form = PredictionFormMultMax(request.POST or None)
    formula = str(request.POST['formula'])
    activity = float(request.POST['activity'])
    cryst = float(request.POST['cryst'])
    length = float(request.POST['length'])
    width = float(request.POST['width'])
    depth = float(request.POST['depth'])
    coat = str(request.POST['coat'])
    pol = str(request.POST['pol'])
    mcoat = str(request.POST['mcoat'])
    surf = str(request.POST['surf'])
    sub1 = str(request.POST['sub1'])
    sub2 = str(request.POST['sub2'])
    ph = float(request.POST['ph'])
    temp = float(request.POST['temp'])
    Cmin = float(request.POST['Cmin'])
    Cmax = float(request.POST['Cmax'])
    Cconst = float(request.POST['Cconst'])
    Ccat = float(request.POST['Ccat'])
    if form.is_valid():
        form.save()
    else:
        messages.error(request, 'Oops...Something went wrong. Please try again')
        print(form.errors)
    #calculation inorg
    volume = length*width*depth
    if 0.15>length//width>6 or 0.15>length//depth>6:
        dstr  = 1
    elif 0.15>length//width>6 and 0.15>length//depth>6:
        dstr = 2
    else:
        dstr = 3
    try:
        intindex_comp = intindex(formula)
        os_comp = OS(intindex_comp)

        redox_list = []
        for i in os_comp.items():
            elem = Element(i[0])
            if elem.is_metal:
                if i[1] <= 0:
                    redox_list.append(0)
                else:
                    redox_list.append(Redox(i[0], int(round(i[1]))))

        lol = elfromcomp(Composition(formula))
        res = []
        for i in lol.items():
            if Element(i[0]).is_metal:
                  rd = Element(i[0]).atomic_radius
                  res.append(rd)
        IR = np.mean(res)
        redox = np.nanmean(redox_list)
        X = Composition(formula).average_electroneg
    except ValueError:
        messages.error(request,
                        'We cannot generate a prediction with the provided inputs. Please review the input fields and try again.',
                        extra_tags='alert')
        return redirect("/apps/multipro")
    #calculation molec
    molec = []
    if coat != 'no':
        molec.append(str(coat))
    if pol != 'no':
        molec.append(str(pol))
    if surf != 'no':
        molec.append(str(surf))
    molec = ", ".join(molec)
    try:
        if coat != 'no':
            sm = smiles(molec)
            prop = pcp.get_properties(['MolecularWeight', 'XLogP','TPSA', 'Complexity'],monomer(coat), 'name')
            mw = prop[0]['MolecularWeight']
            polym = float(mcoat)*1000/float(mw)
            logp = prop[0]['XLogP']
            tpsa = prop[0]['TPSA']
            comp = prop[0]['Complexity']
            mol = Chem.MolFromSmiles(str(sm))
            allDescrs = getMolDescriptors(mol)
            peoe7 = allDescrs['PEOE_VSA7']
            peoe9 = allDescrs['PEOE_VSA9']
            vsa8 = allDescrs['VSA_EState8']
            kap = allDescrs['Kappa2']
            bala = allDescrs['BalabanJ']
            mabse = allDescrs['MinAbsEStateIndex']
            mest = allDescrs['MinEStateIndex']
            est6 = allDescrs['EState_VSA6']
            vsa4 = allDescrs['VSA_EState4']
            peoe8 = allDescrs['PEOE_VSA8']
            mpch = allDescrs['MinPartialCharge']
            est4 = allDescrs['EState_VSA4']
            smr7 = allDescrs['SMR_VSA7']
            bcut2d = allDescrs['BCUT2D_CHGLO']
        elif pol != 'no' or surf != 'no':
            sm = smiles(molec)
            logp = tpsa = comp = 0
            mol = Chem.MolFromSmiles(str(sm))
            allDescrs = getMolDescriptors(mol)
            mw = allDescrs['ExactMolWt']
            polym = float(mcoat)*1000/float(mw)
            peoe7 = allDescrs['PEOE_VSA7']
            peoe9 = allDescrs['PEOE_VSA9']
            vsa8 = allDescrs['VSA_EState8']
            kap = allDescrs['Kappa2']
            bala = allDescrs['BalabanJ']
            mabse = allDescrs['MinAbsEStateIndex']
            mest = allDescrs['MinEStateIndex']
            est6 = allDescrs['EState_VSA6']
            vsa4 = allDescrs['VSA_EState4']
            peoe8 = allDescrs['PEOE_VSA8']
            mpch = allDescrs['MinPartialCharge']
            est4 = allDescrs['EState_VSA4']
            smr7 = allDescrs['SMR_VSA7']
            bcut2d = allDescrs['BCUT2D_CHGLO']
        else:
            logp = tpsa = comp = mw = polym = peoe7 = peoe9 = vsa8 = kap = bala = mabse = mest = est6 = vsa4 = peoe8 = mpch = est4 = smr7 = bcut2d = 0
    except IndexError:
        messages.error(request,
                        'Coating molecules format is wrong. Please review the input field and try again.',
                        extra_tags='alert')
        return redirect("/apps/multipro")

    try:
        sm1 = smiles(sub1)
        prop1 = pcp.get_properties(['MolecularWeight','TPSA', 'Complexity'],sub1, 'name')
        tpsa1 = prop1[0]['TPSA']
        comp1 = prop1[0]['Complexity']
        mol1 = Chem.MolFromSmiles(str(sm1))
        allDescrs1 = getMolDescriptors(mol1)
        mest1 = allDescrs1['MaxEStateIndex']
        mpch1 = allDescrs1['MaxPartialCharge']
        mipch1 = allDescrs1['MinPartialCharge']
    except:
        messages.error(request, 'Substrate molecules format is wrong. Please review the input field and try again.',extra_tags='alert')
        return redirect("/apps/multipro")

    if activity == 2:
        tpsa2 = mest2 = 0
    else:
        try:
            sm2 = smiles(sub2)
            prop2 = pcp.get_properties(['MolecularWeight','TPSA'], sub2, 'name')
            tpsa2 = prop2[0]['TPSA']
            mol2 = Chem.MolFromSmiles(str(sm2))
            allDescrs2 = getMolDescriptors(mol2)
            mest2 = allDescrs2['MaxEStateIndex']
        except:
            messages.error(request,
                            'Substrate molecules format is wrong. Please review the input field and try again.',
                            extra_tags='alert')